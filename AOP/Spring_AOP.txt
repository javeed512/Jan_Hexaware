
Aspect Oriented Programming with Spring
========================================:

Introduction
Aspect-Oriented Programming (AOP) complements Object-Oriented Programming (OOP) by providing another way of thinking about program structure. The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity is the aspect. Aspects enable the modularization of concerns such as transaction management that cut across multiple types and objects. (Such concerns are often termed crosscutting concerns in AOP literature.)

One of the key components of Spring is the AOP framework. While the Spring IoC container does not depend on AOP, meaning you do not need to use AOP if you don't want to, AOP complements Spring IoC to provide a very capable middleware solution.


Aspect: a modularization of a concern that cuts across multiple classes. Transaction management is a good example of a crosscutting concern in J2EE applications. In Spring AOP, aspects are implemented using regular classes (the schema-based approach) or regular classes annotated with the @Aspect annotation (the @AspectJ style) .

Join point: a point during the execution of a program, such as the execution of a method or the handling of an exception. In Spring AOP, a join point always represents a method execution.

Advice: action taken by an aspect at a particular join point. Different types of advice include "around," "before" and "after" advice. (Advice types are discussed below.) Many AOP frameworks, including Spring, model an advice as an interceptor, maintaining a chain of interceptors around the join point.

Pointcut: a predicate that matches join points. Advice is associated with a pointcut expression and runs at any join point matched by the pointcut (for example, the execution of a method with a certain name). The concept of join points as matched by pointcut expressions is central to AOP, and Spring uses the AspectJ pointcut expression language by default.


Target object: object being advised by one or more aspects. Also referred to as the advised object. Since Spring AOP is implemented using runtime proxies, this object will always be a proxied object.


Types of advice:

Before advice: Advice that executes before a join point, but which does not have the ability to prevent execution flow proceeding to the join point (unless it throws an exception).

After returning advice: Advice to be executed after a join point completes normally: for example, if a method returns without throwing an exception.

After throwing advice: Advice to be executed if a method exits by throwing an exception.

After (finally) advice: Advice to be executed regardless of the means by which a join point exits (normal or exceptional return).

Around advice: Advice that surrounds a join point such as a method invocation. This is the most powerful kind of advice. Around advice can perform custom behavior before and after the method invocation. It is also responsible for choosing whether to proceed to the join point or to shortcut the advised method execution by returning its own return value or throwing an exception.










Without Aspect OPs

------------------------------------------------

com.axis.bank.service;
class BankService{


		logger(){

			// print messages
			// UPDATE logs
		}

	

		log(){.....}


		public boolean userLogin(){  
			// user login logics....
			// new logic

		}

	
		public String  fundTransfer(){
		
			// fund transfer logics :::::

		return "Fund transfer successfully.."


		}
		public void withdraw(){

		}

		public  void deposit(){

		}

}



Main-Class:


public void main(){


	case 1:    
		login(); 
		//logger()
		fundTransfer();
		//logger()
		break;
	case 2:  
		login();
		withdraw();
		
		break;

	case 3:  
		login();
		deposit();
		
		break;

}

---------------------------------------------------------


com.axis.aspect;
@Aspect
class  UserLogin  {  // Aspect

	

}

------------------------------------------------------------------------------------------

Service class Demo for below aspect class
=========================================

@Service
public class BankService {
	
	
		public void login() {
			
			
			System.out.println("User Login success..");
			
		}	
	
		
	
		
		public  void fundTransfer() {
			
			
			System.out.println("Fund Transfer successfully..");
			
			
		}
		
		public void withdraw() {
			
		
			
			System.out.println("Amount Withdraw successfully..");
			
		}
		
		public void deposit() {
	
			
			System.out.println("Amount Deposited successfully..");
			
		}
		
		public double  getBalance(int acno) {
			
				if(acno > 0) {
					
					return 99000;
				}
				else {
					
					throw new NullPointerException();
				}
			
		}
		
	
	

}



Steps to implement Aspect Oriented Programming in Spring:
==========================================================
step1: copy below dependencies in pom.xml file

pom.xml
-------------------------------------------------
<!--
		https://mvnrepository.com/artifact/org.springframework/spring-context -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.3.23</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>1.9.7</version>
			
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.9.7</version>
			
		</dependency>


----------------------------------------------------------------------
step2: create packages
  service , config, aspect

step3: Create Business Service class (BankService) and implement few services

setp4: Create Aspect class along with join points and advices

Aspect class Demo
=================

@Component
@Aspect
public class LoggingAspect { // Logs mean writing messages or printing msg
	  
	// below @Before and @After annotations known as Advice or Actions
	
		@Before("execution(*  com.hexaware.aop.service.BankService.login())")  // here expressions are known as point cut
		public void beforeLog() {  // join point
			
			System.out.println("Before Bank Service happen  logs created ");
			
		}
		
		@After("execution(*  com.hexaware.aop.service.BankService.withdraw())")
		public void afterLog(input) { // join point
			
			System.out.println("after Bank Service happen  logs created ");
			
		}
		
		@Around("execution(*  com.hexaware.aop.service.BankService.fundTransfer())")
		public void logger(){

				System.out.println("logs for fund transfer");
                  }



		
		@Pointcut("execution(* com.hexaware.aop.service.BankService.getBalance(..))")
		public void  afterReturningPointCut() {
			
			
		}
		
		
		@AfterReturning(pointcut = "afterReturningPointCut()" , returning ="balance")
		public void afterReturningBalance(double balance) {
			
			
			System.out.println("logger after  only returing balance for  "+ balance);
			
			
		}
		
		@AfterThrowing(pointcut = "afterReturningPointCut()" , throwing = "e")
		public void afterThrowingExp(Exception e) {
			
			
			
			System.out.println("logger after throwing exp " );
			
			
			
		}
		
		
		
		
		

}



